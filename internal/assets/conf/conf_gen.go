// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5f\x4f\x23\x39\x12\x7f\xef\x4f\x51\x93\xbb\x39\xc1\x2a\x09\x61\xe6\xc4\xcc\x81\x5a\xba\x2c\x34\x10\x1d\x03\x5c\x12\x86\xdd\x1d\x8d\xbc\x4e\xbb\x92\xf8\xe2\xb6\xfb\x6c\x37\x21\xf3\xe9\x4f\x65\x77\x37\x19\x26\xa0\x7d\x39\x69\xc5\x03\x71\xbb\xea\x57\x7f\x5c\x7f\x79\x59\x32\xcd\x0b\x84\x14\xc4\x37\xcf\xdd\xca\x25\x33\xcb\xb5\x78\xfe\xd1\x56\x9a\x55\x0e\xed\xb3\x4f\x85\x11\x44\x55\x5a\x23\x92\xe4\x8b\x32\x8b\xaf\xc9\x09\x4c\x97\x08\xca\x2c\x60\x6e\x6c\xc1\x3d\xa0\xf4\x4b\xb4\xd0\xf9\x8f\x33\xba\x03\xc6\x42\xc7\xe3\xa3\xef\x24\xf5\x75\xda\x9c\xad\x31\x9e\x95\xdc\x2f\xe9\x93\x32\x0b\xd7\x49\x92\xe4\x8b\x43\xe7\xa4\xd1\x0d\x6e\x7d\x24\x89\x0f\x52\xa0\xed\xb6\xf0\x05\x16\xc6\x6e\x3a\x5d\xe8\xcc\xa5\xc2\x4e\x37\x48\xb2\x28\xa4\xeb\xf4\x93\x86\x1c\x52\x88\x74\x35\x5c\x6e\xf4\x5c\x2e\x2a\xcb\x3d\x81\xce\x8d\x05\x8b\xae\xc4\xdc\xcb\x07\x6c\x65\x1c\x27\x27\xd0\xab\xf9\x8e\x41\x18\x74\xa0\x8d\x07\x8d\x28\x80\xeb\x4d\x0d\x02\x1b\xf4\x81\x90\xc4\x1f\xb7\x8a\xd2\x09\xc8\xaa\x2e\x60\x7f\xd1\x87\xdf\x05\xf7\xfc\xa0\xbe\x75\xbf\x07\x8e\xa0\xe5\x31\x68\xf4\x6b\x63\x57\xa9\xcf\xcb\x2e\x17\xc2\xa6\xc7\x47\xef\x3f\xfc\xa3\x5b\x72\xe7\xd6\xc6\x8a\xb4\xe0\x39\xb7\x46\x77\xc5\x2c\x1d\x74\x4b\x63\x14\x73\xf2\x1b\xa6\x87\x83\x41\x57\x0a\x85\xcc\xcb\x02\x4d\xe5\xd3\xc3\x8f\x83\xd6\x60\x56\x2b\x97\xc2\x77\x72\x5b\xf3\xcd\x4a\x22\x84\xb7\xf6\x06\x9c\x37\x16\xc1\x6f\xb9\x59\x0a\xd4\x5e\xce\x25\xda\x7e\x12\x89\x9b\xc0\x90\x4c\xc9\x15\x32\x59\x70\xa9\x92\x13\xb8\x5f\x62\x78\x06\x42\x41\xdf\x00\x4b\x0d\x97\xd3\xe9\xed\x04\x8c\x56\x9b\x16\xc1\x61\x5e\x59\xc2\x98\x73\xe5\xb0\x56\xe5\xe2\x14\xa4\xf6\x68\x1f\xb8\x22\x36\x87\xb9\xd1\xc2\x85\x27\x69\x94\x21\x0b\xfa\xc9\x22\x67\x2d\x61\x0a\xef\x8f\x06\x83\x1a\xa1\xe0\x8f\xb2\xa8\x0a\x50\x72\x8e\x40\xbe\x78\x8e\xc3\x1b\xa4\x7e\x52\xf0\x47\x46\x74\xc1\x67\x90\xc2\xc7\xa3\xbf\xb7\x38\xdb\x4e\x21\xb6\xd3\xc9\xf8\x1c\xbc\x59\xa1\xee\x27\xb9\xb3\x73\xf6\xbd\x23\x18\x7d\x4b\x92\x2f\xbc\xf2\xcb\x26\x4a\x1f\xb8\x92\x02\x44\x13\x57\x66\x0e\x9c\x42\x8a\x7b\x42\x17\x41\xb1\x42\xea\xca\xa3\xeb\x27\xc3\xd3\xe9\xe8\xf3\x70\x9a\xb1\xd3\x9b\xb3\x8c\x5d\x8d\x3e\x67\x13\x48\x81\xde\xf0\x25\x2c\x8b\xe4\xe2\x26\x2c\x7e\x44\x1c\x67\x93\x6c\xca\x6e\x87\x93\xc9\xfd\xcd\xf8\x6c\x17\xee\xd6\x6b\x59\xfc\x6f\x25\x2d\x02\xd2\x43\xc6\x50\xa6\xb4\x6c\xd2\x81\x0b\x21\xf5\x02\x34\xae\x6b\x0a\x0a\x4c\x74\x8e\xe4\x9c\x40\xa6\xf9\x4c\x51\xc4\x48\x07\xa6\x0c\x4c\x6b\xa9\x14\x70\xe5\x9e\x90\x43\xd9\xf0\xa6\xc1\x0e\xf1\x15\xb1\x62\xbe\x2d\xa4\xf3\xd1\x38\x52\xfd\xdf\x77\xa3\x71\xc6\xb2\x4f\xc3\xd1\x15\x3b\xbd\xb9\x3e\x1f\x8d\x3f\x0d\xa7\xa3\x9b\xeb\xad\x70\xd9\xd2\x5e\x48\xc7\x95\x32\x6b\xe0\xda\xe8\x4d\x61\x2a\x17\xc4\x39\x78\x90\x4e\x7a\xd2\x3c\x44\xb3\xf4\xf8\x84\x3d\x19\x5d\x5c\x8f\xae\xd9\xe7\x51\x76\xff\x32\x28\x99\xe5\x50\xcd\x7b\xdf\xe9\x47\x54\xba\xb9\x17\x5d\xe0\x79\x6e\x2a\xed\x1d\xac\x4d\xa5\x04\x2c\xf9\x43\xc8\xa3\x19\x42\x6e\x91\x7b\x14\x30\xdb\x00\x17\x85\xd4\xae\x9f\x9c\x8d\x26\xc3\x9f\xaf\x32\x36\xce\x2e\x46\x93\xe9\xf8\x15\xab\x30\xba\x35\xe7\xa5\xcf\x97\x3c\x46\xc0\x76\x85\x7a\xd2\x28\xc9\xae\x7f\xc0\x64\xa7\xc3\xdb\xe9\xe9\xe5\x10\x52\xf0\xb6\xc2\x64\x27\xb6\xc5\x07\xb4\x2e\xd4\xb8\xc7\x0d\x50\xec\x52\xa2\xe7\x51\xca\x83\xe4\x21\x6f\x61\x89\x5c\x50\xea\xb7\x52\x3e\x67\xe3\x49\xc6\x6e\xc7\x37\xbf\xfc\xca\x86\x77\xd3\xcb\xec\x7a\x3a\x3a\x7d\xc5\x12\x5e\x79\x43\xd1\x94\x73\xa5\x36\xb5\x53\x42\x30\xc5\x57\x8a\xe6\xbc\xac\xc9\xcb\x92\x6f\x5e\x72\x23\xa5\xcc\x96\xee\x24\x48\x00\x8f\x61\xd1\xa6\xf4\xeb\x32\x5f\x33\x93\x5d\x66\xc3\xb3\x6c\x0c\x29\xfc\xd2\xbb\xcf\x7e\xa6\xcb\xde\xdd\x24\x1b\x53\xab\x5a\xe3\xac\x29\x00\xa5\x35\xde\xe4\x46\x81\x5f\x72\x0f\xd2\x45\x35\x42\x71\xb4\x0f\x08\x42\x5a\xcc\x3d\x78\xcb\xe7\x73\x99\xd3\x77\x0a\x53\x5e\x96\xaa\x55\xe2\x04\x4e\x2b\x6b\x51\x7b\xb5\x01\x57\x95\xa5\xb1\xde\x41\x67\xe9\x7d\x49\x2d\x8e\xfe\xbb\xd0\xeb\xf2\x85\xec\x00\xd7\x02\x3a\x95\x96\x8f\xb1\xd5\x45\xd1\x29\x10\x55\xad\x50\x9d\xb6\x75\x74\x2a\xe9\x3c\xea\x18\x9e\x3f\x48\x26\x2e\x46\xf4\x90\xc2\xa0\x1f\xfe\x92\xc6\x2c\x63\x3d\xe8\xaa\x98\xc5\xd7\xfd\x43\x48\x81\x27\x85\xce\xe1\xe0\xe3\xa0\xd3\x02\x55\x33\x25\xf3\xde\x9c\xe7\x94\xa3\xc2\x14\x5c\xea\xa7\x8a\xfb\x03\x50\x4d\x90\x82\x32\x39\x57\x4b\xe3\x7c\x0b\x44\xf3\x42\x68\x12\xde\x58\xc2\xda\xe2\x03\xea\xe4\x92\x1c\x1c\x3b\x07\xcd\x3a\xf4\xab\x19\x32\xe8\xf7\x6e\x85\xee\xc6\x57\xbb\x15\xc1\x47\x4f\x61\xa4\x58\x65\xc9\xc1\x6f\xf7\x1a\x6f\xef\xbb\xe3\x83\x83\xb7\x7b\x51\xd1\x7d\x77\xfc\x76\xaf\x35\x7e\xdf\x1d\x90\x94\x0b\xd4\x68\x29\xfc\x9d\xc7\xd2\xd1\x4c\xf1\x57\xe8\x1f\xc8\x58\x76\xd1\x7a\xe8\xe5\x3c\xa5\x84\x85\x5e\x53\xec\xd3\x8f\x1f\x8e\x06\xcb\x41\x31\x70\xd0\x23\xa3\xd3\x62\x43\xff\xfa\xf8\xc8\x8b\x52\x61\x3f\x37\x45\x72\x92\x9c\xc0\x8d\x85\xb9\x35\x05\x70\xe8\x97\xf3\xc7\x38\x72\xe0\x23\xc9\x46\x11\x6f\xc8\x90\x7b\xa9\x85\x59\xbb\x20\x8c\xbc\x12\x75\xa1\x8e\xbf\x27\x4c\x72\x12\x66\x9a\xb9\xb1\x0b\xf4\xa1\x4e\x04\xfe\xc0\x58\xda\xd8\xba\x56\xb8\xd9\x8f\x7a\x9b\x12\xb5\x73\x0a\xca\x55\xee\x0e\xdf\x41\x4f\xea\x80\x1a\xa4\xf7\x4c\xe5\xeb\x13\x16\xd0\xd3\x66\x85\x1b\xf7\xc7\xb8\x56\xb8\x69\x98\xe8\xc2\xd1\x0f\x81\x2e\xa1\x03\x0b\x56\xa5\x90\x57\xce\x9b\xe2\x20\x24\xc0\x41\x23\x26\x59\xe1\x66\x27\x41\x8d\xd8\xbc\x72\x21\x75\x18\x11\x42\xcf\x40\x01\xd3\xab\x09\x50\x25\x90\x46\x77\x21\xdf\x91\x6f\xd3\xab\xc9\xe1\x80\xf2\x8c\x7e\x1c\x36\x3f\xde\x75\xba\x31\xe5\xe8\xf0\xbe\xd3\x4f\xbc\x72\xac\x90\x9a\xd5\x58\x90\x42\x20\x4b\x4e\xe0\x3c\x8c\x7f\x68\x0b\x19\x67\x98\x35\x35\x90\x58\x04\x9a\xec\xa7\x6a\x7b\xa7\xe5\x63\x93\x06\xce\xe4\x2b\xf4\xfd\x84\xf2\x99\xc5\x03\xdb\x42\x48\xe1\xe8\xe8\x28\x39\x81\x2b\x4a\x05\xd8\x3b\xfb\xf4\xdb\x7e\x1b\xaf\x34\x3e\x52\x5d\xdd\x0b\xa3\xe6\x64\x72\x09\x55\x29\xb8\xc7\x7d\xea\x54\x34\xfb\xe8\x05\xac\x71\x16\x14\x90\x39\x52\x95\x19\x69\x28\x8c\xf3\x90\x73\x87\x0e\x36\xa6\x02\x61\x9e\xc6\x5b\x6a\xdb\x4b\xae\x17\x71\x2a\x14\x38\xe7\x95\xf2\xd4\x90\xaa\xc0\x3c\x54\x1e\x2d\x48\x1f\xe6\x3b\x90\x73\xe2\xb7\x41\x6e\x30\xd1\x82\x0e\xb3\x49\x9c\x97\x43\x27\xa6\x14\xe7\x2e\x56\x68\xba\xec\x27\x21\xa5\x59\x18\xfe\x5f\x48\xaa\xb6\x20\xed\xcc\xab\x1d\x8d\x5b\x99\xc5\x82\x4c\x95\x1a\xac\xa9\x3c\x75\xb0\xfa\x8a\xc5\x33\xa3\xf5\xa4\x6e\x8f\xbb\xba\xe3\x76\x11\x51\xf8\x80\x0a\x2e\x7e\x1b\xdd\x42\x6e\x8a\xd2\x36\x23\x64\x24\x65\x8b\x6f\xb2\x6c\xdb\xcf\x4e\x30\x6f\x40\x19\x4e\x4d\xc8\xa1\x77\xb0\x27\xfb\xd8\x87\x0e\x4d\x43\x14\x4f\x1e\x8b\x52\x71\x8f\xa1\x9a\xc7\x2a\xd4\xd9\x8f\x49\x2b\xa4\x5b\x81\xd4\xce\x23\x17\x34\xf7\x61\x31\x43\x21\xa8\xd6\x4a\x1d\x2b\x1a\xe1\xb2\x88\xcb\x88\x85\x05\x96\x2d\x6d\xc2\x2a\xc6\x75\x98\xe1\x4a\xbe\xc0\x36\x52\x9e\xcd\x4b\xdd\xf0\x3a\xe1\x5d\xc1\x2d\xc3\x30\x43\x4f\x26\x75\xae\x2a\x41\x3e\x72\xd5\x2c\x54\xcd\xa6\x9f\x2d\xb9\x16\xea\xa9\xec\x7f\xd7\x50\xfb\x49\x2d\xb2\x7e\xd0\x83\x24\x89\xe1\x47\xcb\x88\xb7\x46\xb1\x90\x7f\xcc\x58\xb9\xa0\xaa\x9e\xc8\x92\xad\x97\xd2\x63\xda\xf9\xa9\xde\xf9\xf2\xca\x4a\xbf\xf9\xfa\x6c\xb1\x58\x9a\x75\x90\x46\x3e\xe1\x4a\x05\x8b\xba\x61\xdf\x08\x13\xa8\x37\xd0\xa1\x27\xed\x84\xde\xb4\xa1\x01\x19\xa4\xef\x27\x35\x39\x53\x26\x5f\x3d\x9b\x14\x1c\xe6\xb6\xae\x77\x3a\xb7\x9b\xb2\xdd\x5c\x82\x2b\x5c\x17\xde\x9d\x0f\xc3\x80\xdd\x05\xf4\x39\x85\xfc\x9b\x37\xa7\x97\xc3\xeb\x8b\x0c\xa6\x97\xa3\x09\x4c\x6f\xe0\x5f\x59\x76\x0b\xbf\xde\xdc\x8d\x81\xe6\x00\x38\x1b\x4e\x87\x30\x19\x9e\x67\x6f\xde\x24\x11\x9d\xad\x70\x03\x29\xbc\xf9\xcb\x3f\xcf\xcf\xb2\xfb\x71\x76\x3f\xfe\xdb\x4f\x7b\xb5\x7c\xc1\x37\x0e\x2c\x16\xf4\xb4\x96\x8a\x35\x3d\x4d\xe5\x4d\x4f\x99\x85\xd4\xf4\xc0\x0b\xa9\x59\x43\xc0\x02\x79\x0a\x1f\x5e\x5b\xdf\x9e\xd8\x41\xea\xb8\x63\x87\x78\xad\xb7\x96\x16\xab\xd9\xe3\xa8\x01\x31\xa9\x73\x5a\x42\x67\x0a\x5f\x83\xa6\xbc\x42\x41\x69\xd5\x4c\x53\x2d\x6c\x3b\x5e\x35\x88\x7c\x8d\xce\x14\xf8\xe3\x6a\x58\x6f\x7f\x91\xef\xe5\x9d\x70\xf7\x42\xe9\x0d\x48\x2d\x62\xef\x0a\x7b\x45\x34\xd4\x79\xee\x2b\xd7\xe6\x64\xf4\x5a\xfc\x58\x6f\x6b\x4f\xd9\xfe\xa2\x75\x3b\xf0\x76\x00\x35\x7e\xdb\xbe\xa2\x90\x75\xea\x6b\x2d\x3e\x8d\x26\x08\x9c\x55\x8b\xb4\x31\xe7\xff\xd5\xfd\xff\x14\xcd\xd8\x39\xf5\x5a\x2b\xa6\xeb\xb6\x11\x27\x5f\x96\xc6\xac\x9e\xf9\xca\xa1\x16\xcc\xe5\x56\x96\x3e\xed\xd0\xa1\x5f\x6e\x3a\x89\xc5\x1c\xe5\x03\xb6\x17\xf5\x39\xdc\x25\xff\x0b\x00\x00\xff\xff\xe1\x29\x30\x50\xb9\x12\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf": confAppConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
